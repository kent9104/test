# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from web3 import Web3
import json
import time
import threading


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(681, 527)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(681, 527))
        MainWindow.setMaximumSize(QtCore.QSize(681, 527))
        MainWindow.setInputMethodHints(QtCore.Qt.ImhNone)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setEnabled(True)
        self.textEdit.setGeometry(QtCore.QRect(10, 263, 661, 241))
        self.textEdit.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.textEdit.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.textEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textEdit.setReadOnly(True)
        self.textEdit.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.textEdit.setPlaceholderText("")
        self.textEdit.setObjectName("textEdit")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 125, 661, 25))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_4.addWidget(self.pushButton_3, 0, 3, 1, 1)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.gridLayout_4.addWidget(self.lineEdit_7, 0, 5, 1, 1)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.gridLayout_4.addWidget(self.lineEdit_6, 0, 2, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.layoutWidget)
        self.label_8.setObjectName("label_8")
        self.gridLayout_4.addWidget(self.label_8, 0, 4, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_4.addWidget(self.pushButton_4, 0, 6, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget)
        self.label_7.setObjectName("label_7")
        self.gridLayout_4.addWidget(self.label_7, 0, 1, 1, 1)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 155, 661, 25))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget1)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 0, 2, 1, 1)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.gridLayout_2.addWidget(self.lineEdit_4, 0, 3, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 0, 4, 1, 1)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_5.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.gridLayout_2.addWidget(self.lineEdit_5, 0, 5, 1, 1)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.layoutWidget1)
        self.doubleSpinBox.setProperty("value", 20.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout_2.addWidget(self.doubleSpinBox, 0, 7, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 6, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_3.addWidget(self.pushButton, 0, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_3.addWidget(self.pushButton_2, 0, 2, 1, 1)
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(11, 10, 451, 48))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget2)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget2)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit_3.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.lineEdit_3.setInputMethodHints(QtCore.Qt.ImhNoAutoUppercase|QtCore.Qt.ImhNoPredictiveText|QtCore.Qt.ImhSensitiveData)
        self.lineEdit_3.setEchoMode(QtWidgets.QLineEdit.PasswordEchoOnEdit)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.gridLayout.addWidget(self.lineEdit_3, 1, 1, 1, 1)
        self.layoutWidget3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget3.setGeometry(QtCore.QRect(11, 99, 451, 22))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.layoutWidget3)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_4.setObjectName("label_4")
        self.gridLayout_5.addWidget(self.label_4, 0, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget3)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout_5.addWidget(self.lineEdit_2, 0, 1, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(402, 60, 61, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(470, 98, 75, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(549, 98, 75, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(9, 230, 661, 31))
        self.widget.setObjectName("widget")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_10.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_21 = QtWidgets.QLabel(self.widget)
        self.label_21.setObjectName("label_21")
        self.gridLayout_8.addWidget(self.label_21, 0, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.widget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_8.addWidget(self.comboBox, 0, 1, 1, 1)
        self.gridLayout_10.addLayout(self.gridLayout_8, 0, 0, 1, 1)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.gridLayout_9.addWidget(self.lineEdit_8, 0, 1, 1, 1)
        self.label_22 = QtWidgets.QLabel(self.widget)
        self.label_22.setObjectName("label_22")
        self.gridLayout_9.addWidget(self.label_22, 0, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.widget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout_9.addWidget(self.pushButton_5, 0, 2, 1, 1)
        self.gridLayout_10.addLayout(self.gridLayout_9, 0, 1, 1, 1)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(72, 63, 321, 32))
        self.widget1.setObjectName("widget1")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.widget1)
        self.gridLayout_11.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_12 = QtWidgets.QLabel(self.widget1)
        self.label_12.setObjectName("label_12")
        self.gridLayout_11.addWidget(self.label_12, 0, 0, 1, 1)
        self.label_23 = QtWidgets.QLabel(self.widget1)
        self.label_23.setObjectName("label_23")
        self.gridLayout_11.addWidget(self.label_23, 1, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.widget1)
        self.label_13.setObjectName("label_13")
        self.gridLayout_11.addWidget(self.label_13, 1, 0, 1, 1)
        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(11, 63, 56, 32))
        self.widget2.setObjectName("widget2")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.widget2)
        self.gridLayout_12.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_10 = QtWidgets.QLabel(self.widget2)
        self.label_10.setObjectName("label_10")
        self.gridLayout_12.addWidget(self.label_10, 0, 0, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.widget2)
        self.label_11.setObjectName("label_11")
        self.gridLayout_12.addWidget(self.label_11, 1, 0, 1, 1)
        self.widget3 = QtWidgets.QWidget(self.centralwidget)
        self.widget3.setGeometry(QtCore.QRect(470, 11, 201, 78))
        self.widget3.setObjectName("widget3")
        self.formLayout = QtWidgets.QFormLayout(self.widget3)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_14 = QtWidgets.QLabel(self.widget3)
        self.label_14.setObjectName("label_14")
        self.gridLayout_6.addWidget(self.label_14, 0, 0, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.widget3)
        self.label_15.setObjectName("label_15")
        self.gridLayout_6.addWidget(self.label_15, 1, 0, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.widget3)
        self.label_16.setObjectName("label_16")
        self.gridLayout_6.addWidget(self.label_16, 2, 0, 1, 1)
        self.label_17 = QtWidgets.QLabel(self.widget3)
        self.label_17.setObjectName("label_17")
        self.gridLayout_6.addWidget(self.label_17, 3, 0, 1, 1)
        self.formLayout.setLayout(0, QtWidgets.QFormLayout.LabelRole, self.gridLayout_6)
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_9 = QtWidgets.QLabel(self.widget3)
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.gridLayout_7.addWidget(self.label_9, 0, 0, 1, 1)
        self.label_18 = QtWidgets.QLabel(self.widget3)
        self.label_18.setText("")
        self.label_18.setObjectName("label_18")
        self.gridLayout_7.addWidget(self.label_18, 1, 0, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.widget3)
        self.label_19.setText("")
        self.label_19.setObjectName("label_19")
        self.gridLayout_7.addWidget(self.label_19, 2, 0, 1, 1)
        self.label_20 = QtWidgets.QLabel(self.widget3)
        self.label_20.setText("")
        self.label_20.setObjectName("label_20")
        self.gridLayout_7.addWidget(self.label_20, 3, 0, 1, 1)
        self.formLayout.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.gridLayout_7)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionLatency = QtWidgets.QAction(MainWindow)
        self.actionLatency.setObjectName("actionLatency")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_3.setText(_translate("MainWindow", "Max"))
        self.label_8.setText(_translate("MainWindow", "卖出数量:"))
        self.pushButton_4.setText(_translate("MainWindow", "Max"))
        self.label_7.setText(_translate("MainWindow", "买入金额(BNB):"))
        self.label_5.setText(_translate("MainWindow", "GasLimit:"))
        self.lineEdit_4.setText(_translate("MainWindow", "4000000"))
        self.lineEdit_4.setPlaceholderText(_translate("MainWindow", "过小会交易失败"))
        self.label_6.setText(_translate("MainWindow", "GasPrice(Gwei):"))
        self.lineEdit_5.setText(_translate("MainWindow", "7"))
        self.lineEdit_5.setPlaceholderText(_translate("MainWindow", "值越大交易越快"))
        self.label_3.setText(_translate("MainWindow", "滑点(%):"))
        self.pushButton.setText(_translate("MainWindow", "买"))
        self.pushButton_2.setText(_translate("MainWindow", "卖"))
        self.label.setText(_translate("MainWindow", "钱包地址:"))
        self.label_2.setText(_translate("MainWindow", "钱包私钥:"))
        self.label_4.setText(_translate("MainWindow", "代币合约:"))
        self.pushButton_6.setText(_translate("MainWindow", "刷新余额"))
        self.pushButton_7.setText(_translate("MainWindow", "检测流动池"))
        self.pushButton_8.setText(_translate("MainWindow", "停止检测"))
        self.label_21.setText(_translate("MainWindow", "节点选择:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "https://bsc-dataseed.binance.org/"))
        self.comboBox.setItemText(1, _translate("MainWindow", "https://bsc-dataseed1.defibit.io/"))
        self.comboBox.setItemText(2, _translate("MainWindow", "https://bsc-dataseed1.ninicoin.io/"))
        self.comboBox.setItemText(3, _translate("MainWindow", "https://bsc-dataseed2.defibit.io/"))
        self.comboBox.setItemText(4, _translate("MainWindow", "https://bsc-dataseed3.defibit.io/"))
        self.comboBox.setItemText(5, _translate("MainWindow", "https://bsc-dataseed4.defibit.io/"))
        self.comboBox.setItemText(6, _translate("MainWindow", "https://bsc-dataseed2.ninicoin.io/"))
        self.comboBox.setItemText(7, _translate("MainWindow", "https://bsc-dataseed3.ninicoin.io/"))
        self.comboBox.setItemText(8, _translate("MainWindow", "https://bsc-dataseed4.ninicoin.io/"))
        self.comboBox.setItemText(9, _translate("MainWindow", "https://bsc-dataseed1.binance.org/"))
        self.comboBox.setItemText(10, _translate("MainWindow", "https://bsc-dataseed2.binance.org/"))
        self.comboBox.setItemText(11, _translate("MainWindow", "https://bsc-dataseed3.binance.org/"))
        self.comboBox.setItemText(12, _translate("MainWindow", "https://bsc-dataseed4.binance.org/"))
        self.lineEdit_8.setPlaceholderText(_translate("MainWindow", "选填"))
        self.label_22.setText(_translate("MainWindow", "自定义:"))
        self.pushButton_5.setText(_translate("MainWindow", "节点测试"))
        self.label_12.setText(_translate("MainWindow", "0"))
        self.label_23.setText(_translate("MainWindow", "≈                    WBNB"))
        self.label_13.setText(_translate("MainWindow", "0"))
        self.label_10.setText(_translate("MainWindow", "WBNB余额:"))
        self.label_11.setText(_translate("MainWindow", "代币余额:"))
        self.label_14.setText(_translate("MainWindow", "代币名称:"))
        self.label_15.setText(_translate("MainWindow", "代币符号:"))
        self.label_16.setText(_translate("MainWindow", "总供应量:"))
        self.label_17.setText(_translate("MainWindow", "精    度:"))
        self.actionLatency.setText(_translate("MainWindow", "Latency"))


ui = Ui_MainWindow()
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui.setupUi(MainWindow)
MainWindow.show()


bsc_url = ui.comboBox.currentText()
web3 = Web3(Web3.HTTPProvider(bsc_url))
pancakeabi = json.loads('[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},'
                        '{"internalType":"address","name":"_WETH","type":"address"}],"stateMutability":"nonpayable",'
                        '"type":"constructor"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address",'
                        '"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{'
                        '"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address",'
                        '"name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256",'
                        '"name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to",'
                        '"type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],'
                        '"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},'
                        '{"internalType":"uint256","name":"liquidity","type":"uint256"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address",'
                        '"name":"token","type":"address"},{"internalType":"uint256","name":"amountTokenDesired",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address",'
                        '"name":"to","type":"address"},{"internalType":"uint256","name":"deadline",'
                        '"type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256",'
                        '"name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH",'
                        '"type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],'
                        '"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{'
                        '"internalType":"address","name":"","type":"address"}],"stateMutability":"view",'
                        '"type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut",'
                        '"type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},'
                        '{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn",'
                        '"outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],'
                        '"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn",'
                        '"type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],'
                        '"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut",'
                        '"type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{'
                        '"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]",'
                        '"name":"path","type":"address[]"}],"name":"getAmountsIn","outputs":[{'
                        '"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view",'
                        '"type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},'
                        '{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut",'
                        '"outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],'
                        '"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountA","type":"uint256"},{"internalType":"uint256","name":"reserveA",'
                        '"type":"uint256"},{"internalType":"uint256","name":"reserveB","type":"uint256"}],'
                        '"name":"quote","outputs":[{"internalType":"uint256","name":"amountB","type":"uint256"}],'
                        '"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address",'
                        '"name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB",'
                        '"type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256",'
                        '"name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to",'
                        '"type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],'
                        '"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address",'
                        '"name":"token","type":"address"},{"internalType":"uint256","name":"liquidity",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address",'
                        '"name":"to","type":"address"},{"internalType":"uint256","name":"deadline",'
                        '"type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256",'
                        '"name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH",'
                        '"type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{'
                        '"internalType":"address","name":"token","type":"address"},{"internalType":"uint256",'
                        '"name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],'
                        '"name":"removeLiquidityETHSupportingFeeOnTransferTokens","outputs":[{'
                        '"internalType":"uint256","name":"amountETH","type":"uint256"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address",'
                        '"name":"token","type":"address"},{"internalType":"uint256","name":"liquidity",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address",'
                        '"name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},'
                        '{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8",'
                        '"name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},'
                        '{"internalType":"bytes32","name":"s","type":"bytes32"}],'
                        '"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256",'
                        '"name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH",'
                        '"type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{'
                        '"internalType":"address","name":"token","type":"address"},{"internalType":"uint256",'
                        '"name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin",'
                        '"type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax",'
                        '"type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32",'
                        '"name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],'
                        '"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","outputs":[{'
                        '"internalType":"uint256","name":"amountETH","type":"uint256"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address",'
                        '"name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB",'
                        '"type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256",'
                        '"name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to",'
                        '"type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},'
                        '{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8",'
                        '"name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},'
                        '{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit",'
                        '"outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},'
                        '{"internalType":"uint256","name":"amountB","type":"uint256"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path",'
                        '"type":"address[]"},{"internalType":"address","name":"to","type":"address"},'
                        '{"internalType":"uint256","name":"deadline","type":"uint256"}],'
                        '"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts",'
                        '"type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{'
                        '"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address['
                        ']","name":"path","type":"address[]"},{"internalType":"address","name":"to",'
                        '"type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],'
                        '"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts",'
                        '"type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{'
                        '"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address['
                        ']","name":"path","type":"address[]"},{"internalType":"address","name":"to",'
                        '"type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],'
                        '"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],'
                        '"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{'
                        '"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],'
                        '"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{'
                        '"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],'
                        '"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{'
                        '"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256",'
                        '"name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax",'
                        '"type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},'
                        '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                        '"name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{'
                        '"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],'
                        '"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable",'
                        '"type":"receive"}]')
erc20abi = json.loads('[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string",'
                      '"name":"symbol","type":"string"},{"internalType":"uint256","name":"initialBalance",'
                      '"type":"uint256"},{"internalType":"address payable","name":"feeReceiver","type":"address"}],'
                      '"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{'
                      '"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,'
                      '"internalType":"address","name":"spender","type":"address"},{"indexed":false,'
                      '"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},'
                      '{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner",'
                      '"type":"address"},{"indexed":true,"internalType":"address","name":"newOwner",'
                      '"type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,'
                      '"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},'
                      '{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,'
                      '"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},'
                      '{"inputs":[{"internalType":"address","name":"owner","type":"address"},'
                      '{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{'
                      '"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view",'
                      '"type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},'
                      '{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{'
                      '"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable",'
                      '"type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],'
                      '"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],'
                      '"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{'
                      '"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},'
                      '{"inputs":[{"internalType":"address","name":"spender","type":"address"},'
                      '{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],'
                      '"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],'
                      '"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"generator","outputs":[{'
                      '"internalType":"string","name":"","type":"string"}],"stateMutability":"pure",'
                      '"type":"function"},{"inputs":[],"name":"getOwner","outputs":[{"internalType":"address",'
                      '"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{'
                      '"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256",'
                      '"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{'
                      '"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable",'
                      '"type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"",'
                      '"type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner",'
                      '"outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view",'
                      '"type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],'
                      '"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{'
                      '"internalType":"string","name":"","type":"string"}],"stateMutability":"view",'
                      '"type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256",'
                      '"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{'
                      '"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256",'
                      '"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool",'
                      '"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{'
                      '"internalType":"address","name":"sender","type":"address"},{"internalType":"address",'
                      '"name":"recipient","type":"address"},{"internalType":"uint256","name":"amount",'
                      '"type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"",'
                      '"type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{'
                      '"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership",'
                      '"outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version",'
                      '"outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view",'
                      '"type":"function"}]')
pancakefactoryabi = json.loads('[{"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],'
                               '"payable":false,"stateMutability":"nonpayable","type":"constructor"},'
                               '{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address",'
                               '"name":"token0","type":"address"},{"indexed":true,"internalType":"address",'
                               '"name":"token1","type":"address"},{"indexed":false,"internalType":"address",'
                               '"name":"pair","type":"address"},{"indexed":false,"internalType":"uint256","name":"",'
                               '"type":"uint256"}],"name":"PairCreated","type":"event"},{"constant":true,"inputs":[],'
                               '"name":"INIT_CODE_PAIR_HASH","outputs":[{"internalType":"bytes32","name":"",'
                               '"type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},'
                               '{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],'
                               '"name":"allPairs","outputs":[{"internalType":"address","name":"","type":"address"}],'
                               '"payable":false,"stateMutability":"view","type":"function"},{"constant":true,'
                               '"inputs":[],"name":"allPairsLength","outputs":[{"internalType":"uint256","name":"",'
                               '"type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},'
                               '{"constant":false,"inputs":[{"internalType":"address","name":"tokenA",'
                               '"type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],'
                               '"name":"createPair","outputs":[{"internalType":"address","name":"pair",'
                               '"type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},'
                               '{"constant":true,"inputs":[],"name":"feeTo","outputs":[{"internalType":"address",'
                               '"name":"","type":"address"}],"payable":false,"stateMutability":"view",'
                               '"type":"function"},{"constant":true,"inputs":[],"name":"feeToSetter","outputs":[{'
                               '"internalType":"address","name":"","type":"address"}],"payable":false,'
                               '"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{'
                               '"internalType":"address","name":"","type":"address"},{"internalType":"address",'
                               '"name":"","type":"address"}],"name":"getPair","outputs":[{"internalType":"address",'
                               '"name":"","type":"address"}],"payable":false,"stateMutability":"view",'
                               '"type":"function"},{"constant":false,"inputs":[{"internalType":"address",'
                               '"name":"_feeTo","type":"address"}],"name":"setFeeTo","outputs":[],"payable":false,'
                               '"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{'
                               '"internalType":"address","name":"_feeToSetter","type":"address"}],'
                               '"name":"setFeeToSetter","outputs":[],"payable":false,"stateMutability":"nonpayable",'
                               '"type":"function"}]')
pairabi = json.loads('[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},'
                     '{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner",'
                     '"type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},'
                     '{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval",'
                     '"type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address",'
                     '"name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0",'
                     '"type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},'
                     '{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn",'
                     '"type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address",'
                     '"name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0",'
                     '"type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1",'
                     '"type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,'
                     '"internalType":"address","name":"sender","type":"address"},{"indexed":false,'
                     '"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,'
                     '"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,'
                     '"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,'
                     '"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,'
                     '"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},'
                     '{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0",'
                     '"type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1",'
                     '"type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,'
                     '"internalType":"address","name":"from","type":"address"},{"indexed":true,'
                     '"internalType":"address","name":"to","type":"address"},{"indexed":false,'
                     '"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},'
                     '{"constant":true,"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32",'
                     '"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},'
                     '{"constant":true,"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256",'
                     '"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},'
                     '{"constant":true,"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32",'
                     '"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},'
                     '{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},'
                     '{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender",'
                     '"type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve",'
                     '"outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,'
                     '"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{'
                     '"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to",'
                     '"type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0",'
                     '"type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],'
                     '"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],'
                     '"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],'
                     '"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],'
                     '"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],'
                     '"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],'
                     '"name":"getReserves","outputs":[{"internalType":"uint112","name":"_reserve0","type":"uint112"},'
                     '{"internalType":"uint112","name":"_reserve1","type":"uint112"},{"internalType":"uint32",'
                     '"name":"_blockTimestampLast","type":"uint32"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_token0",'
                     '"type":"address"},{"internalType":"address","name":"_token1","type":"address"}],'
                     '"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable",'
                     '"type":"function"},{"constant":true,"inputs":[],"name":"kLast","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to",'
                     '"type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity",'
                     '"type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},'
                     '{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"",'
                     '"type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,'
                     '"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner",'
                     '"type":"address"},{"internalType":"address","name":"spender","type":"address"},'
                     '{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256",'
                     '"name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},'
                     '{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s",'
                     '"type":"bytes32"}],"name":"permit","outputs":[],"payable":false,"stateMutability":"nonpayable",'
                     '"type":"function"},{"constant":true,"inputs":[],"name":"price0CumulativeLast","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":true,"inputs":[],"name":"price1CumulativeLast","outputs":[{'
                     '"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to",'
                     '"type":"address"}],"name":"skim","outputs":[],"payable":false,"stateMutability":"nonpayable",'
                     '"type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"amount0Out",'
                     '"type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},'
                     '{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data",'
                     '"type":"bytes"}],"name":"swap","outputs":[],"payable":false,"stateMutability":"nonpayable",'
                     '"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{'
                     '"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view",'
                     '"type":"function"},{"constant":false,"inputs":[],"name":"sync","outputs":[],"payable":false,'
                     '"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"token0",'
                     '"outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,'
                     '"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token1",'
                     '"outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,'
                     '"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply",'
                     '"outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,'
                     '"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{'
                     '"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                     '"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool",'
                     '"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},'
                     '{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},'
                     '{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256",'
                     '"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool",'
                     '"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]')
pancakerouter = "0x10ED43C718714eb63d5aA57B78B54704E256024E"
pancakefactory = "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73"
wbnb = "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
run_or_not = 1


def checksum(contract):
    tokencontract_checksum = Web3.toChecksumAddress(contract)
    return tokencontract_checksum


pancake = web3.eth.contract(address=checksum(pancakerouter), abi=pancakeabi)
factory = web3.eth.contract(address=checksum(pancakefactory), abi=pancakefactoryabi)


def wbnb_balance():
    walletadr = ui.lineEdit.text()
    wbnb_blance = web3.fromWei(web3.eth.getBalance(walletadr), 'ether')
    return wbnb_blance


def getinfo():
    '获取指定代币总供应量'
    tokencontract = ui.lineEdit_2.text()
    erc20 = web3.eth.contract(address=checksum(tokencontract), abi=erc20abi)
    totalsupply_no_decimals = erc20.functions.totalSupply().call()  #获取没有精度的总供应量
    decimals = erc20.functions.decimals().call()  #获取精度
    totalsupply = float(totalsupply_no_decimals/(10**decimals))  #实际总供应量
    '获取指定代币name和symbol'
    name = erc20.functions.name().call()
    symbol = erc20.functions.symbol().call()

    #print(wbnb_balance())  #查询钱包wbnb余额
    #print(name, symbol, totalsupply, decimals)
    return [name, symbol, totalsupply, decimals]


def balance(wallet, token, humanread):
    contract = web3.eth.contract(address=checksum(token), abi=erc20abi)
    tokenblance_no_decimals = contract.functions.balanceOf(checksum(wallet)).call()
    if humanread == 1:
        decimals = contract.functions.decimals().call()  #获取精度
        tokenblance = float(tokenblance_no_decimals/(10**decimals))
        return tokenblance
    else:
        return tokenblance_no_decimals


def how_many_tokens_can_buy():
    tokencontract = ui.lineEdit_2.text()
    howmuchbnb: float = float(ui.lineEdit_6.text())
    amount = float(pancake.functions.getAmountsOut(web3.toWei(howmuchbnb, 'ether'), [checksum(wbnb), checksum(tokencontract)]).call()[-1])/10**getinfo()[-1]
    return amount


def sell_one_token_price():
    tokencontract = ui.lineEdit_2.text()
    price = web3.fromWei(int(pancake.functions.getAmountsOut(10**getinfo()[-1], [checksum(tokencontract), checksum(wbnb)]).call()[-1]), 'ether')
    return price


def buy_one_token_price():
    tokencontract = ui.lineEdit_2.text()
    price = web3.fromWei(int(pancake.functions.getAmountsIn(10**getinfo()[-1], [checksum(wbnb), checksum(tokencontract)]).call()[0]), 'ether')
    return price


def how_many_bnb_can_get():
    tokens_sell: float = float(ui.lineEdit_7.text())
    tokencontract = ui.lineEdit_2.text()
    price = web3.fromWei(int(pancake.functions.getAmountsOut(int(tokens_sell*10**getinfo()[-1]), [checksum(tokencontract), checksum(wbnb)]).call()[-1]), 'ether')
    return price


def get_pool():
    try:
        global run_or_not
        run_or_not = 1
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 开始检测流动性！' + '\n')
        tokencontract = ui.lineEdit_2.text()
        pair_addr = '0x0000000000000000000000000000000000000000'
        getinfofunc_t()
        while pair_addr == '0x0000000000000000000000000000000000000000' and run_or_not == 1:
            pair_addr = factory.functions.getPair(checksum(wbnb), checksum(tokencontract)).call()
            if pair_addr == '0x0000000000000000000000000000000000000000':
                ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 还未创建交易对 Pair:' + str(pair_addr) + '\n')
                time.sleep(1)
            else:
                ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 检测到交易对 Pair:' + str(pair_addr) + '\n')
        if run_or_not == 1:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 开始检测流动性 Pair:' + str(pair_addr) + '\n')
        else:
            pass
        while True and run_or_not == 1:
            time.sleep(1)
            pair = web3.eth.contract(address=checksum(pair_addr), abi=pairabi)
            pool = pair.functions.getReserves().call()
            if pool != [0, 0, 0]:
                ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 检测到流动池: ' + str(pool) + '\n')
                break
            else:
                ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 未检测到流动池: ' + str(pool) + '\n')
        if run_or_not == 0:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 停止检测' + '\n')
        else:
            pass


    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def buy():
    try:
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 开始买入\n')
        tokencontract = ui.lineEdit_2.text()
        private_key = ui.lineEdit_3.text()
        walletadr = ui.lineEdit.text()
        howmuchbnb: float = float(ui.lineEdit_6.text())
        slippages: float = float(ui.doubleSpinBox.text()) * 0.01
        gasprice: float = float(ui.lineEdit_5.text())
        gaslimit: int = int(ui.lineEdit_4.text())
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 信息获取完成，准备发送交易\n')
        'build交易(最少获得的代币数量，[要花费的代币地址，要买的代币地址]，钱包地址，交易限制时间 当前是10min)'
        tx_info = pancake.functions.swapExactETHForTokensSupportingFeeOnTransferTokens(int(how_many_tokens_can_buy()*(10**getinfo()[-1])*(1-slippages)), [checksum(wbnb), checksum(tokencontract)], walletadr, int(time.time()) + 10 * 60). \
            buildTransaction(
            {
                'from': walletadr,
                'value': web3.toWei(howmuchbnb, 'ether'),
                'gas': gaslimit,
                'gasPrice': web3.toWei(gasprice, 'Gwei'),
                'nonce': web3.eth.get_transaction_count(walletadr),
            }
        )
        sign_txn = web3.eth.account.sign_transaction(tx_info, private_key=private_key)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 交易已发送，等待Txn'+'\n')
        res = web3.eth.sendRawTransaction(sign_txn.rawTransaction).hex()
        txn_receipt = web3.eth.waitForTransactionReceipt(res)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' Txn:'+str(res)+'\n')
        if txn_receipt['status'] == 1:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 交易完成! WBNB余额：'+str(wbnb_balance())+' '+str(getinfo()[1])+'余额：'+str(balance(walletadr, tokencontract, 1))+'\n')
            getbalancefunc()
            approve()
        else:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 交易失败，详情：'+str('https://bscscan.com/tx/'+str(res))+'\n')

        return txn_receipt
    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def check_approved():
    walletadr = ui.lineEdit.text()
    tokencontract = ui.lineEdit_2.text()
    erc20 = web3.eth.contract(address=checksum(tokencontract), abi=erc20abi)
    ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 授权检测...\n')
    allowance = erc20.functions.allowance(checksum(walletadr), checksum(pancakerouter)).call()
    ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 授权数量：'+str(allowance)+'\n')
    return allowance


def approve():
    tokencontract = ui.lineEdit_2.text()
    private_key = ui.lineEdit_3.text()
    walletadr = ui.lineEdit.text()
    gasprice: float = float(ui.lineEdit_5.text())
    gaslimit: int = int(ui.lineEdit_4.text())
    erc20 = web3.eth.contract(address=checksum(tokencontract), abi=erc20abi)
    if check_approved() < balance(walletadr, tokencontract, 0):
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 代币未授权，自动授权...\n')
        approve_info = erc20.functions.approve(checksum(pancakerouter), int(f"0x{64 * 'f'}", 16)).buildTransaction(
            {
                'from': walletadr,
                'value': web3.toWei(0, 'ether'),
                'gas': gaslimit,
                'gasPrice': web3.toWei(gasprice, 'Gwei'),
                'nonce': web3.eth.get_transaction_count(walletadr),
            }
        )
        sign_txn = web3.eth.account.sign_transaction(approve_info, private_key=private_key)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 授权中...'+'\n')
        res = web3.eth.sendRawTransaction(sign_txn.rawTransaction).hex()
        txn_receipt = web3.eth.waitForTransactionReceipt(res)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' Txn:'+str(res)+'\n')
        if txn_receipt['status'] == 1:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 授权完成'+'\n')
        else:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 授权失败，详情查看：'+str('https://bscscan.com/tx/'+str(res))+'\n')
    else:
        pass


def sell():
    try:
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 开始卖出\n')
        tokencontract = ui.lineEdit_2.text()
        private_key = ui.lineEdit_3.text()
        walletadr = ui.lineEdit.text()
        tokens_sell: float = float(ui.lineEdit_7.text())
        slippages: float = float(ui.doubleSpinBox.text()) * 0.01
        gasprice: float = float(ui.lineEdit_5.text())
        gaslimit: int = int(ui.lineEdit_4.text())
        approve()
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 信息获取完成，准备发送交易\n')
        '(卖出数量, 最少收到的wbnb, [要花费的代币地址，要买的代币地址], 钱包地址，交易限制时间 当前是10min)'
        tx_info = pancake.functions.swapExactTokensForETHSupportingFeeOnTransferTokens(int(tokens_sell*10**getinfo()[-1]), int(web3.toWei(how_many_bnb_can_get(), 'ether')*(1-slippages)), [checksum(tokencontract), checksum(wbnb)], walletadr, int(time.time()) + 10 * 60). \
            buildTransaction(
            {
                'from': walletadr,
                #'value': web3.toWei(howmuchbnb, 'ether'),
                'gas': gaslimit,
                'gasPrice': web3.toWei(gasprice, 'Gwei'),
                'nonce': web3.eth.get_transaction_count(walletadr),
            }
        )
        sign_txn = web3.eth.account.sign_transaction(tx_info, private_key=private_key)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 交易已发送，等待Txn' + '\n')
        res = web3.eth.sendRawTransaction(sign_txn.rawTransaction).hex()
        txn_receipt = web3.eth.waitForTransactionReceipt(res)
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' Txn:' + str(res) + '\n')
        if txn_receipt['status'] == 1:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 交易完成! WBNB余额：' + str(wbnb_balance()) + ' ' + str(getinfo()[1]) + '余额：' + str(balance(walletadr, tokencontract, 1)) + '\n')
            getbalancefunc()
        else:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S")) + ' 交易失败，详情：' + str('https://bscscan.com/tx/' + str(res)) + '\n')
        return txn_receipt
    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def latency():
    try:
        global bsc_url
        if ui.lineEdit_8.text() == '':
            bsc_url = ui.comboBox.currentText()
        else:
            bsc_url = ui.lineEdit_8.text()
            if 'wss://' in bsc_url:
                global web3
                web3 = Web3(Web3.WebsocketProvider(bsc_url))
            else:
                pass
        ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 当前节点:'+bsc_url+'\n')
        t1 = time.time_ns()
        status = web3.isConnected()
        if status is True:
            t2 = time.time_ns()
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' Connected! Latency:'+str((t2-t1)/1000000)+'ms'+'\n')
        else:
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' Fail!'+'\n')
    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def getinfofunc():
    try:
        info = getinfo()
        ui.label_9.setText(str(info[0]))
        ui.label_18.setText(str(info[1]))
        ui.label_19.setText(str(info[2]))
        ui.label_20.setText(str(info[-1]))

    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def getinfofunc_t():
    t = threading.Thread(target=getinfofunc)
    t.start()


def getbalancefunc():
    try:
        if ui.lineEdit_2.text() == '':
            bnb = wbnb_balance()
            ui.label_12.setText(str(bnb))
            ui.label_13.setText('未填写代币合约')
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 余额已更新\n')
        else:
            bnb = wbnb_balance()
            token = balance(ui.lineEdit.text(), ui.lineEdit_2.text(), 1)
            getinfofunc_t()
            ui.label_12.setText(str(bnb))
            ui.label_13.setText(str(token))
            ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 余额已更新\n')
            showbnb_t()

    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def getbalancefunc_t():
    ui.textEdit.insertPlainText(str(time.strftime("%Y-%m-%d %H:%M:%S"))+' 正在获取余额...\n')
    t = threading.Thread(target=getbalancefunc)
    t.start()


def getmaxbnb():
    try:
        bnb = float(wbnb_balance())
        if bnb != 0:
            gaslimit = int(ui.lineEdit_4.text())
            gasprice = web3.fromWei(int(web3.toWei(float(ui.lineEdit_5.text()), 'gwei')), 'ether')
            maxbnb = str(bnb - float((gasprice*gaslimit*2)))
            ui.lineEdit_6.setText(maxbnb)
        else:
            pass
    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def getmaxbnb_t():
    t = threading.Thread(target=getmaxbnb)
    t.start()


def getmaxtoken():
    try:
        token = balance(ui.lineEdit.text(), ui.lineEdit_2.text(), 1)
        ui.lineEdit_7.setText(str(token))
    except Exception as e:
        ui.textEdit.insertPlainText(str(e) + '\n')


def getmaxtoken_t():
    t = threading.Thread(target=getmaxtoken)
    t.start()


def buy_t():
    t = threading.Thread(target=buy)
    t.start()


def sell_t():
    t = threading.Thread(target=sell)
    t.start()


def latency_t():
    t = threading.Thread(target=latency)
    t.start()


def showbnb():
    tokens_hold = float(ui.label_13.text())
    tokencontract = ui.lineEdit_2.text()
    jindu = getinfo()[-1]
    while True:
        price = web3.fromWei(int(pancake.functions.getAmountsOut(int(tokens_hold*10**jindu), [checksum(tokencontract), checksum(wbnb)]).call()[-1]), 'ether')
        ui.label_23.setText('≈ '+str(price)[0:20]+' WBNB')
        time.sleep(1)


def showbnb_t():
    t = threading.Thread(target=showbnb)
    t.start()


def getpool_t():
    t = threading.Thread(target=get_pool)
    t.start()

def stop():
    global run_or_not
    run_or_not = 0

ui.pushButton_5.clicked.connect(latency_t)
ui.pushButton_6.clicked.connect(getbalancefunc_t)
ui.pushButton_3.clicked.connect(getmaxbnb_t)
ui.pushButton_4.clicked.connect(getmaxtoken_t)
ui.pushButton.clicked.connect(buy_t)
ui.pushButton_2.clicked.connect(sell_t)
ui.pushButton_7.clicked.connect(getpool_t)
ui.pushButton_8.clicked.connect(stop)


sys.exit(app.exec_())
